---
// BarChart component for displaying animated bar charts
export interface Props {
	title?: string;
	data: {
		categories: string[];
		series: {
			name: string;
			values: number[];
			color: string;
		}[];
	};
	yAxisLabel?: string;
	maxValue?: number;
}

const { title, data, yAxisLabel = "Success Rate (%)", maxValue } = Astro.props;

// Calculate max value if not provided
const calculatedMaxValue = maxValue || Math.max(...data.series.flatMap(s => s.values)) * 1.1;
---

<style>
	.bar-chart-container {
		font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
	}
	
	.bar {
		transform-origin: bottom;
		transform: scaleY(0);
		transition: transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
	}
	
	.bar.animate {
		transform: scaleY(1);
	}
	
	.value-label {
		opacity: 0;
		transform: translateY(10px);
		transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
	}
	
	.value-label.animate {
		opacity: 1;
		transform: translateY(0);
	}
	
	.category-label {
		font-size: 14px;
		font-weight: 500;
		fill: #374151;
	}
	
	.axis-label {
		font-size: 14px;
		font-weight: 500;
		fill: #6b7280;
	}
	
	.legend-item {
		display: flex;
		align-items: center;
		gap: 8px;
		font-size: 14px;
		color: #374151;
	}
	
	.legend-color {
		width: 16px;
		height: 16px;
		border-radius: 2px;
	}
</style>

<div class="bar-chart-container bg-white rounded-lg shadow-sm p-6 mb-6 max-w-6xl mx-auto">
	{title && <h3 class="text-xl font-bold text-gray-900 mb-4 text-center">{title}</h3>}
	
	<div class="chart-wrapper" style="width: 100%; height: 400px;">
		<svg width="100%" height="100%" viewBox="0 0 800 400" class="chart-svg">
			<!-- Y-axis -->
			<line x1="80" y1="50" x2="80" y2="320" stroke="#e5e7eb" stroke-width="1"/>
			
			<!-- X-axis -->
			<line x1="80" y1="320" x2="720" y2="320" stroke="#e5e7eb" stroke-width="1"/>
			
			<!-- Y-axis labels -->
			{[0, 20, 40, 60, 80].map(value => (
				<g>
					<line x1="75" y1={320 - (value / 80) * 270} x2="80" y2={320 - (value / 80) * 270} stroke="#9ca3af" stroke-width="1"/>
					<text x="70" y={320 - (value / 80) * 270 + 5} text-anchor="end" class="axis-label">{value}</text>
				</g>
			))}
			
			<!-- Y-axis title -->
			<text x="25" y="185" text-anchor="middle" transform="rotate(-90, 25, 185)" class="axis-label">{yAxisLabel}</text>
			
			<!-- Bars and labels -->
			{data.categories.map((category, categoryIndex) => {
				const categoryWidth = 600 / data.categories.length;
				const barWidth = (categoryWidth - 40) / data.series.length;
				const categoryX = 100 + categoryIndex * categoryWidth;
				
				return (
					<g>
						<!-- Category label -->
						<text 
							x={categoryX + categoryWidth / 2} 
							y="345" 
							text-anchor="middle" 
							class="category-label"
						>
							{category}
						</text>
						
						<!-- Bars for this category -->
						{data.series.map((series, seriesIndex) => {
							const value = series.values[categoryIndex];
							const barHeight = (value / calculatedMaxValue) * 270;
							const barX = categoryX + seriesIndex * barWidth + 10;
							const barY = 320 - barHeight;
							
							return (
								<g>
									<!-- Bar -->
									<path
										d={`M ${barX} 320 L ${barX} ${barY + 8} Q ${barX} ${barY} ${barX + 8} ${barY} L ${barX + barWidth - 4 - 8} ${barY} Q ${barX + barWidth - 4} ${barY} ${barX + barWidth - 4} ${barY + 8} L ${barX + barWidth - 4} 320 Z`}
										fill={series.color}
										class="bar"
										data-category={categoryIndex}
										data-series={seriesIndex}
									/>
									
									<!-- Value label -->
									<text
										x={barX + (barWidth - 4) / 2}
										y={barY - 8}
										text-anchor="middle"
										class="value-label"
										fill="#374151"
										font-size="12"
										font-weight="600"
										data-category={categoryIndex}
										data-series={seriesIndex}
									>
										{value}
									</text>
								</g>
							);
						})}
					</g>
				);
			})}
		</svg>
	</div>
	
	<!-- Legend -->
	<div class="flex justify-center gap-8 mt-4">
		{data.series.map(series => (
			<div class="legend-item">
				<div class="legend-color" style={`background-color: ${series.color}`}></div>
				<span>{series.name}</span>
			</div>
		))}
	</div>
</div>

<script>
	// Animation when element comes into view
	const observerCallback = (entries: IntersectionObserverEntry[]) => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				const chartContainer = entry.target;
				const bars = chartContainer.querySelectorAll('.bar');
				const labels = chartContainer.querySelectorAll('.value-label');
				
				// Animate bars with staggered delay
				bars.forEach((bar, index) => {
					setTimeout(() => {
						bar.classList.add('animate');
					}, index * 100);
				});
				
				// Animate value labels with slight delay after bars
				labels.forEach((label, index) => {
					setTimeout(() => {
						label.classList.add('animate');
					}, index * 100 + 300);
				});
				
				// Stop observing after animation
				observer.unobserve(chartContainer);
			}
		});
	};
	
	const observer = new IntersectionObserver(observerCallback, {
		threshold: 0.3,
		rootMargin: '0px 0px -50px 0px'
	});
	
	// Observe all chart containers
	document.addEventListener('DOMContentLoaded', () => {
		document.querySelectorAll('.bar-chart-container').forEach(container => {
			observer.observe(container);
		});
	});
</script>
